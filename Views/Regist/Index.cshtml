@using Microsoft.EntityFrameworkCore.Metadata;
@using Microsoft.AspNetCore.Authorization;
@using System.Collections;
@using System.Security.Claims
@using webFerum.Models.AppContext;
@using webFerum.Service;

@inject IAuthorizationService AuthorizationService
@inject UserService userService
@inject RoleService roleServ;

@{
    ViewData["Title"] = "Регистрация";
    var res = await AuthorizationService.AuthorizeAsync(User, "Admin");
    string actionPath = res.Succeeded ? "/Regist/Add" : "/Regist/Reg";
    string endPoint = res.Succeeded ? "/AProfile/" : "/Profile";
}

<div>
    <div class="container mt-4">
        <div class="card">
            <div class="card-body">
                <div class="form-group row">
                    <label for="Name" class="col-sm-3 col-form-label">Имя:</label>
                    <div class="col-sm-9">
                        <input type="text" id="name" name="Name" class="form-control mb-3">
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Surname" class="col-sm-3 col-form-label">Фамилия:</label>
                    <div class="col-sm-9">
                        <input type="text" id="surname" name="Surname" class="form-control mb-3">
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Lastname" class="col-sm-3 col-form-label">Отчество:</label>
                    <div class="col-sm-9">
                        <input type="text" id="lastname" name="Lastname" class="form-control mb-3">
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Number" class="col-sm-3 col-form-label">Номер телефона:</label>
                    <div class="col-sm-9">
                        <input type="text" id="number" name="Number" class="form-control mb-3">
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Email" class="col-sm-3 col-form-label">Почта:</label>
                    <div class="col-sm-9">
                        <input type="text" id="email" name="Email" class="form-control mb-3">
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Password" class="col-sm-3 col-form-label">Пароль:</label>
                    <div class="col-sm-9">
                        <input type="password" id="password" name="Password" class="form-control mb-3">
                    </div>
                </div>
                @if (res.Succeeded)
                {
                    <div class="form-group row">
                        <label for="Role" class="col-sm-3 col-form-label">Должность:</label>
                        <div class="col-sm-9">
                            <select class="form-control mb-3" id="role" name="Role">
                                <option value="">Выберите должность</option>
                                @foreach (Role r in await roleServ.GetRolesAsync())
                                {
                                    <option value="@r.Id">@r.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <script>
                        var itsAdmin = true;
                    </script>
                }
                else
                {
                    <script>
                        var itsAdmin = false;
                    </script>
                }

                <div class="form-group row">
                    <div class="col-sm-9 offset-sm-3">
                        <p id="ErrorNotification" class="text-danger mb-3"></p>
                    </div>
                    <div class="col-sm-9 offset-sm-3">
                        <input id="createSubmit" class="btn btn-primary" value="Подтвердить" type="submit">
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>


<script>
    
    function isEmpty(input) {
        return input.trim().length === 0;
    }
    document.getElementById("createSubmit").addEventListener("click", async e => {
        
        if (isEmpty(document.getElementById("name").value)) {
            document.getElementById("ErrorNotification").innerHTML = "Введите имя!";
            return;
        }
        else if (isEmpty(document.getElementById("surname").value)) {
            document.getElementById("ErrorNotification").innerHTML = "Введите фамилию!";
            return;
        }
        else if (isEmpty(document.getElementById("lastname").value)) {
            document.getElementById("ErrorNotification").innerHTML = "Введите отчество!";
            return;
        }
        else if (isEmpty(document.getElementById("number").value)) {
            document.getElementById("ErrorNotification").innerHTML = "Введите номер!";
            return;
        }
        else if (isEmpty(document.getElementById("email").value)) {
            document.getElementById("ErrorNotification").innerHTML = "Введите почту!";
            return;
        }
        else if (isEmpty(document.getElementById("password").value)) {
            document.getElementById("ErrorNotification").innerHTML = "Введите пароль!";
            return;
        }
        else if (isEmpty(document.getElementById("role").value) && itsAdmin) { 
            document.getElementById("ErrorNotification").innerHTML = "Выберите должность!";
            return;
        }

        e.preventDefault();

        if (itsAdmin) {
            let response = await fetch("@actionPath", {
                method: "POST",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify({
                    Name: document.getElementById("name").value,
                    Surname: document.getElementById("surname").value,
                    Lastname: document.getElementById("lastname").value,
                    Number: document.getElementById("number").value,
                    Email: document.getElementById("email").value,
                    Password: document.getElementById("password").value,
                    Role: document.getElementById("role").value
                })
            });
        }
        else { 
            let response = await fetch("@actionPath", {
                method: "POST",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify({
                    Name: document.getElementById("name").value,
                    Surname: document.getElementById("surname").value,
                    Lastname: document.getElementById("lastname").value,
                    Number: document.getElementById("number").value,
                    Email: document.getElementById("email").value,
                    Password: document.getElementById("password").value
                })
            });
        }

        var responseCopy = response.clone();

        if (isAdmin) {
            if (response.ok === true) {
                document.location.href = `/Profile/AProfile/${response.json().id}`;
            }
            else {
                document.getElementById("ErrorNotification").innerHTML = "Что-то пошло не так";
            }
        }
        else {
            if (response.ok === true) {
                document.location.href = '/Auth';
            }
            else {
                document.getElementById("ErrorNotification").innerHTML = "Что-то пошло не так";
            }
        }
        
    });
</script>
